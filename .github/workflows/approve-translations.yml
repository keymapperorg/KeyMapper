name: Auto Approve Crowdin Translations

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  approve-translations:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get install -y jq
          npm i -g @crowdin/cli

      - name: Approve top-voted translations
        env:
          CROWDIN_TOKEN: ${{ secrets.CROWDIN_PERSONAL_TOKEN }}
          CROWDIN_PROJECT_ID: ${{ secrets.CROWDIN_PROJECT_ID }}
        run: |
          set -e
          [ -z "$CROWDIN_TOKEN" ] && echo "Missing token" && exit 1
          [ -z "$CROWDIN_PROJECT_ID" ] && echo "Missing project id" && exit 1

          echo "Start automatic approval crowdin translations..."

          # Get all string IDs
          STRING_IDS=$(curl -s -H "Authorization: Bearer $CROWDIN_TOKEN" \
            "https://api.crowdin.com/api/v2/projects/$CROWDIN_PROJECT_ID/strings?limit=500" | jq -r '.data[].data.id')

          # For each string, approve the translation with the most votes if not already approved
          for STRING_ID in $STRING_IDS; do
            TRANSLATIONS=$(curl -s -H "Authorization: Bearer $CROWDIN_TOKEN" \
              "https://api.crowdin.com/api/v2/projects/$CROWDIN_PROJECT_ID/strings/$STRING_ID/translations?limit=100")

            TOP=$(echo "$TRANSLATIONS" | jq -r '
              .data
              | map(select(.data.isApproved == false))
              | max_by(.data.upvotesCount)
              | select(.data.upvotesCount >= 0)
              | .data.id')

            if [ -n "$TOP" ]; then
              curl -s -X POST -H "Authorization: Bearer $CROWDIN_TOKEN" \
                -H "Content-Type: application/json" \
                "https://api.crowdin.com/api/v2/projects/$CROWDIN_PROJECT_ID/translations/$STRING_ID/approvals" \
                -d "{\"translationId\":$TOP}"
              echo "Approved translation $TOP for string $STRING_ID"
            fi
          done

          echo "Approval process finished."